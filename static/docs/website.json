{
  "functions": [
    {
      "name": "run",
      "description": "It's called by main.py to start the website.",
      "parameters": [
        {
          "name": "**kwargs",
          "description": "The arguments are directly passed to Flask when he runs the website.",
          "type": "dict"
        }
      ]
    },
    {
      "name": "homepage",
      "description": "The function renders the homepage in which the project is explained briefly."
    },
    {
      "name": "documentation",
      "description": "Return the webpages with the documentation of the project.<br><br>Every webpage of the docs has it's name added after \"/documentation/\"<br>This means that you can add all the webpages that you want and you won't need to write a single line of code, just add the html files to \"templates/documentation/\" and the .json files with the documentation to the folder containing all the .json written in \"settings.py\".<br><br>Any eventual OSError exception is purposefully caught here and not in mediator.py to show the error as a popup with flash().",
      "parameters": [
        {
          "name": "file",
          "description": "Is the name of the documentation webpage. For example if file=\"settings\" then the url will be \"documentation/setting\".",
          "type": "str"
        }
      ]
    },
    {
      "name": "functions",
      "description": "Returns the webpage which lets you select the operation you want to do with the datasets."
    },
    {
      "name": "download",
      "description": "Allows to download the table computed by an operation as tsv file.<br><br>Steps:<br>Step 1) Get \"name_file\" from the page that requested the download. <br>Step 2) Check if \"name_file\" is None. If it is it means that the previous page did not return any value, or does not have any button named \"name_file\". <br>Step 3) If \"name_file\" is not None, it computes the complete path by joining the current path of execution of the program, thus the main directory of the program, and \"name_file\". Then it checks if it's a file and if it's exists. It if does it means the previous page requested a file to download, and it downloads it, otherwise it means \"name_file\" is the name of the name that will have the table once it'll be converted to .tsv. <br>Step 3.1) In the latter case, it requests the table from the cache by using the global variable \"TABLE_CACHE_NAME\" defined in \"settings.py\". If the data retrieved is None it means that there was not any table in the cache, thus it redirect to the previous page and tells the user through a notification that he needs to reload the page as the table probably expired from the cache. <br>Step 4) Extract from the dictionary \"data_to_save\" the rows and the labels of the table. <br>Step 5) A csv.writer is instantiated. It needs <a href='https://docs.python.org/3/library/io.html'>StringIO module</a> to instantiate a file-object. <br>Step 6) Write as the first row the labels of the columns, then write all the rows <br>Step 7) Make a response which allows the .tsv file to be downloaded <br>Step 8) Set some information of the file that will be downloaded like its name and filetype.<br><br><code># Step 4)<br>    rows = data_to_save['rows'] <br>    labels = [data_to_save['labels']] <br> <br>    # Step 5) <br>    si = StringIO() <br>    cw = csv.writer(si, delimiter='\\t') <br> <br>    # Step 6) <br>    cw.writerows(labels) <br>    cw.writerows(rows) <br> <br>    # Step 7) <br>    output = make_response(si.getvalue()) <br> <br>    # Step 8) <br>    output.headers[\"Content-Disposition\"] = f\"attachment; filename={name_file}.tsv\" <br>    output.headers[\"Content-type\"] = \"text/tsv\" <br>    return output</code>  <br><br>To know more about the concept behind, please refer to <a href='/documentation/projectOverview#Download a table'>\"Download a table\"</a> section in the Project Overview.",
      "rtype": "download"
    },
    {
      "name": "browseGeneDataset",
      "description": "Renders the webpage which lets you go through gene dataset. To do the pagination it uses Pagination() from flask-paginate."
    },
    {
      "name": "browseDiseasesDataset",
      "description": "Renders the webpage which lets you go through gene dataset. To do the pagination it uses Pagination() from flask-paginate."
    },
    {
      "name": "info",
      "description": "Renders the webpage which presents all the information about the datasets and a preview of heads and tails."
    },
    {
      "name": "distinctGenes",
      "description": "Renders the webpage which presents all the unique distinct genes in the gene dataset."
    },
    {
      "name": "geneEvidences",
      "description": "The first time the user access \"geneEvidences\" it is requested with 'GET' method. Then it returns a webpage which lets the user input a geneSymbol or a geneID. It is then submitted back to \"geneEvidences\" but with 'POST' method. Now it returns a webpage which lists all the evidences in literature of the relation between the gene and COVID-19."
    },
    {
      "name": "diseaseEvidences",
      "description": "The first time the user access \"diseaseEvidences\" it is requested with 'GET' method. Then it returns a webpage which lets the user input a diseaseID or a diseaseName. It is then submitted back to \"diseaseEvidences\" but with 'POST' method. Now it returns a webpage which lists all the evidences in literature of the relation between the disease and COVID-19."
    },
    {
      "name": "correlation",
      "description": "The webpage lists the correlations between genes and diseases.<br><br>It allows th user to customize the results, he can decide the number of correlations to show (\"rows\") and the minimum number of occurrences a correlation needs to have to be shown (\"occurrences\").<br><br>If \"occurrence\" is given and the user hasn't written anything in \"rows\" then it sets \"rows\" to 0 which means that all rows will be returned. Also, if the user wants 50 rows, but the rows which meet the occurrence requirement are 30, only 30 rows will be returned."
    },
    {
      "name": "diseasesRelatedToGene",
      "description": "The first time the user access \"diseasesRelatedToGene\" it is requested with 'GET' method. Then it returns a webpage which lets the user input a geneSymbol or a geneID. It is then submitted back to \"diseasesRelatedToGene\" but with 'POST' method. Now it returns a webpage which lists all the diseases related to the gene found in literature."
    },
    {
      "name": "genesRelatedToDisease",
      "description": "The first time the user access \"genesRelatedToDisease\" it is requested with 'GET' method. Then it returns a webpage which lets the user input a diseaseName or a diseaseID. It is then submitted back to \"genesRelatedToDisease\" but with 'POST' method. Now it returns a webpage which lists all the genes related to the disease found in literature."
    }
  ]
}