{
  "sections": [
    {
      "title": "Features",
      "title_dimension": 2,
      "text": [
        "Here are described all the features and techniques used to write the program.",
        "The website is made using <a href='https://bulma.io/'>bulma</a> as CSS framework and <a href='https://fontawesome.com/'>FontAwesome</a> for the icons."
      ]
    },
    {
      "title": "Templates",
      "title_dimension": 3,
      "text": [
        "To keep the style of the website consistent throughout all the webpages, we used a template called <span class=\"has-text-weight-semibold\">'base.html'</span> which contains code needed on all webpages like:",
        "<span class='title is-size-5'>Initialization code:</span> here is declared the doctype, the language, the stylesheets, the icons and jsquery.",
        "<span class='title is-size-5'>Navigation-bar:</span> here is all the code pertaining the navigation-bar at the top of the webpage with its links.",
        "<span class='title is-size-5'>Popup notification:</span> in case there is a message that needs to be communicated to the user, here is the code which lets a popup notification appear at the top of the screen. All the messages can be sent by using <code>flash()</code> in a python file with Flask, they will queue up until a new page is loaded, then they will be presented. As argument it needs something to pass to the html file like a string or a dictionary. We've set up the popup to so that it's possible to pass a dict to provide some degree of customization and let the message box be usable both for warnings and for information.",
        "<code>message = {<br>'type':'colour of the popup',<br>'header':'title of the popup',<br>'message':'text of the popup',<br>'details':'additional details'<br>}</code>.",
        "The <code>'type'</code> can be of the all colors possible with <a href='https://bulma.io/documentation/components/message/'>bulma-message</a>. You just need to write the actual type, without <code>is-</code>.",
        "Example: <code>info</code>, <code>success</code> or <code>warning</code>.",
        "<div class='columns'><div class='column'><article class=\"message is-info\"><div class=\"message-header\"><p>Info</p><button class=\"delete\" aria-label=\"delete\"></button></div><div class=\"message-body\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. <strong>Pellentesque risus mi</strong>, tempus quis placerat ut, porta nec nulla.</div></article></div><div class='column'><article class=\"message is-success\"><div class=\"message-header\"><p>Success</p><button class=\"delete\" aria-label=\"delete\"></button></div><div class=\"message-body\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. <strong>Pellentesque risus mi</strong>, tempus quis placerat ut, porta nec nulla.</div></article></div><div class='column'><article class=\"message is-warning\"><div class=\"message-header\"><p>Warning</p><button class=\"delete\" aria-label=\"delete\"></button></div><div class=\"message-body\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. <strong>Pellentesque risus mi</strong>, tempus quis placerat ut, porta nec nulla.</div> </article></div></div>    "
      ]
    },
    {
      "title": "jinja block",
      "title_dimension": 3,
      "text": [
        "We used <code>{% block name %}{% endblock %}</code> inside the html files to pass pieces of code to \"base.html\" from which all html files inherit from. In this way it's possible to personalize the code for every webpage, for example by passing the code for the body using <code>{% block content %} {% endblock %}</code>."
      ]
    },
    {
      "title": "Macros",
      "title_dimension": 3,
      "text": [
        "To avoid rewriting many times over the same code, we have implemented the use of macros to be called when needed.",
        "For example in all the html documents of the operations, to show the tables, there are macros with the style customizable when called. The macros used are 3: <span class=\"has-text-weight-semibold\"> mytable, mytable_info, mytable_with_pmid_links</span>.<br> The first one is the main one, mytable_info instead is used in the webpage '/info' to show head and tail of the two datasets, while the last one is used to add links to the original articles of pmid in the tables.",
        "To let one macro be usable for all the tables and operations, the data passed to the html file by jinja and used by the tables needs to be as general as possible, thus is written as a dictionary with the following keys: <br><code>data = {<br>'labels': 'labels of the table',<br>'rows': 'rows of the table',<br>'lenght': 'length of the table'<br>}</code>",
        ""
      ]
    },
    {
      "title": "download a table",
      "title_dimension": 3,
      "text": [
        "In every page which presents the results of an operation the user has the ability to download the table just computed as a .tsv file.",
        "To achieve this, we leveraged the power of flask-caching to save the table (as a dictionary) in the cache and then once the user clicks on the button to download it, the function <code>download()</code> in <a href='/documentation/website'>\"website.py\"</a> retrieves the table from the cache, converts it to a tsv file and lets the user download it.",
        "Example: Suppose that the user wants to find the evidences in literature of the relation between a gene and COVID-19. Here's what happens: <br>Step1) <a href='/documentation/website#geneEvidences'>\"geneEvidences\"</a> inside \"website.py\" is called, and it asks the user for a gene.<br> Step 2) \"geneEvidences\" then send the gene to \"mediator.py\" which computes the results and send them back.<br>Step 3) Then \"geneEvidences\" render the html page with the table and a part of its name ('_evidences') as arguments. <br>Step 4) The html file then shows the table and when the download-button is clicked the name that will have the .tsv table is computed using the name of the function and passed to \"download()\". In our example if the gene is \"ACE2\", the name of the file will be \"ACE2_evidences\".<br>Step 5) Then \"download()\" retrieves the name, retrieved the table, convert it to a .tsv file and return it, which means it will be downloaded.",
        "Going more in detail, the cache saves the data in a dictionary-like style, this means that each object is saved in a \"key:value\" pair, and the key for the table is <a href='/documentation/settings#Cache Settings'>TABLE_CACHE_NAME</a> defined in <a href='/documentation/settings'>\"settings.py\"</a>. ",
        "To know more about the process of conversion from the table dictionary to a tsv file please refer to the function <a href='/documentation/website#download'>download</a>"
      ]
    },
    {
      "title": "documentation",
      "title_dimension": 3,
      "text": [
        ""
      ]
    }
  ]
}
